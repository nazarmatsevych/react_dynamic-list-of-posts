{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/api.js","api/comments.js","api/posts.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","selectedPostId","setSelectPost","className","length","map","post","key","id","userId","title","type","classNames","PostList__button","button","button_active","onClick","NewCommentForm","onAdd","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","clearForm","onSubmit","event","preventDefault","placeholder","value","required","onChange","target","name","Loader","get","url","options","fetch","then","response","json","result","data","deleteComment","commentId","method","addComment","comment","headers","body","JSON","stringify","getPosts","PostDetails","selectedPost","setSelectedPost","comments","setComments","commentsHidden","setCommentsHidden","useEffect","postId","getPostComments","currentStatus","currentComment","filter","email","App","setPosts","users","setUsers","setSelectedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.217a3baa.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const PostsList = ({\n  posts,\n  selectedPostId,\n  setSelectPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length !== 0 ? (\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames({\n                PostList__button: true,\n                button: true,\n                button_active: selectedPostId === post.id,\n              })}\n              onClick={() => {\n                setSelectPost(post.id);\n              }}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    ) : (\n      'No user posts'\n    )}\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setSelectPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ onAdd }) => {\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newBody, setNewBody] = useState('');\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    onAdd(newName, newEmail, newBody);\n    clearForm();\n  };\n\n  const clearForm = () => {\n    setNewName('');\n    setNewEmail('');\n    setNewBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          required\n          onChange={({ target }) => setNewName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newEmail}\n          required\n          onChange={({ target }) => setNewEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newBody}\n          required\n          onChange={({ target }) => setNewBody(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function get(url, options) {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function remove(url) {\n  return get(url, { method: 'DELETE' });\n}\n\nexport function post(url, data) {\n  return get(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n}\n","import { get, remove, post } from './api';\n\nexport function getPostComments(postId) {\n  return get(`/comments?postId=${postId}`);\n}\n\nexport function deleteComment(commentId) {\n  return remove(`/comments/${commentId}`);\n}\n\nexport function addComment(comment) {\n  return post(`/comments`, comment);\n}\n","import { get } from './api';\n\nexport const getPosts = () => get('/posts');\n\nexport function getUserPosts(userId) {\n  return get(`/posts?userId=${userId}`);\n}\n\nexport function getPostDetails(postId) {\n  return get(`/posts/${postId}`);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\n\nimport './PostDetails.scss';\n\nimport {\n  deleteComment,\n  getPostComments,\n  addComment,\n} from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [commentsHidden, setCommentsHidden] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(result => setSelectedPost(result));\n\n    setComments(null);\n\n    getPostComments(selectedPostId)\n      .then(result => setComments(result));\n  }, [selectedPostId]);\n\n  const removeComment = (id) => {\n    deleteComment(id)\n      .then(() => {\n        setComments(currentComment => (\n          currentComment.filter(comment => comment.id !== id)\n        ));\n      });\n  };\n\n  const addNewComment = (name, email, body) => {\n    const commentBody = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    addComment(commentBody)\n      .then((result) => {\n        setComments(currentComment => [...currentComment, result]);\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {selectedPost ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{selectedPost.title}</p>\n          </section>\n\n          {comments ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                {comments.length === 0\n                  ? 'No comments yet'\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setCommentsHidden(currentStatus => !currentStatus);\n                      }}\n                    >\n                      {commentsHidden\n                        ? `Show ${comments.length} comments`\n                        : `Hide ${comments.length} comments`\n                      }\n                    </button>\n                  )}\n\n                {!commentsHidden && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li className=\"PostDetails__list-item\" key={comment.id}>\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            removeComment(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm onAdd={addNewComment} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n// import { post } from './api/api';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getPosts()\n      .then(data => setPosts(data));\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  const selectedUserPosts = ({ target }) => {\n    if (+target.value === 0) {\n      getPosts()\n        .then(data => setPosts(data));\n    }\n\n    getUserPosts(target.value)\n      .then(data => setPosts(data));\n  };\n\n  const setSelectPost = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n\n    return setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectedUserPosts}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            setSelectPost={setSelectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails selectedPostId={selectedPostId} />\n            )\n            : 'No selected post'\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { get } from './api';\n\nexport const getUsers = () => get('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}